{"version":3,"sources":["components/DefaultTreeNodeProp.js","components/ObjectTreeNodeProp.js","components/TreeNode.js","App.js","index.js"],"names":["DefaultTreeNodeProp","_ref","prefix","propValue","valueClass","propKey","react_default","a","createElement","className","key","ObjectTreeNodeProp","data","level","levelPrefix","_useState","useState","_useState2","Object","slicedToArray","collapsed","setCollapsed","onClick","components_TreeNode","renderNormalTreeNodeProp","renderTreeNodeProp","levelAppend","components_DefaultTreeNodeProp","components_ObjectTreeNodeProp","toString","split","length","substring","TreeNode","_ref$level","_ref$levelPrefix","_ref$collapsed","treeNodeProps","sortedPropKeys","push","sort","i","renderLastChildTreeNodeProp","App","window","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.d89842a9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./TreeNodeProp.css\";\r\n\r\nfunction DefaultTreeNodeProp({ prefix, propValue, valueClass, propKey }) {\r\n  return (\r\n    <div className=\"tree-node-prop default\" key={propKey}>\r\n      <div className=\"prefix\">{prefix}</div>\r\n      <div className=\"spacer\"> </div>\r\n      <div className=\"prop-key\">{propKey}: </div>\r\n      <div className={\"prop-value \" + valueClass}>{propValue}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DefaultTreeNodeProp;\r\n","import React, { useState } from \"react\";\r\nimport \"./TreeNodeProp.css\";\r\nimport TreeNode from \"./TreeNode\";\r\n\r\nfunction ObjectTreeNodeProp({ prefix, propKey, data, level, levelPrefix }) {\r\n  const [collapsed, setCollapsed] = useState(true);\r\n\r\n  return (\r\n    <div className=\"tree-node-prop object\" key={propKey}>\r\n      <div className=\"prefix\">{prefix}</div>\r\n      <div\r\n        className={\"expander \" + (collapsed ? \"collapsed\" : \"\")}\r\n        onClick={() => setCollapsed(!collapsed)}\r\n      >\r\n      </div>\r\n      <div className=\"prop-key\">{propKey}: </div>\r\n      <div className=\"prop-value\">{\"{}\"}</div>\r\n      <TreeNode\r\n        collapsed={collapsed}\r\n        data={data[propKey]}\r\n        level={level + 1}\r\n        levelPrefix={levelPrefix}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ObjectTreeNodeProp;\r\n","import React from \"react\";\r\nimport \"./TreeNode.css\";\r\nimport DefaultTreeNodeProp from \"./DefaultTreeNodeProp\";\r\nimport ObjectTreeNodeProp from \"./ObjectTreeNodeProp\";\r\n\r\nfunction renderNormalTreeNodeProp(propKey, data, level, levelPrefix) {\r\n  return renderTreeNodeProp(\r\n    propKey,\r\n    data,\r\n    level,\r\n    levelPrefix,\r\n    level ? \"├─ \" : \"\",\r\n    \"│  \"\r\n  );\r\n}\r\n\r\nfunction renderLastChildTreeNodeProp(propKey, data, level, levelPrefix) {\r\n  return renderTreeNodeProp(\r\n    propKey,\r\n    data,\r\n    level,\r\n    levelPrefix,\r\n    level ? \"└─ \" : \"\",\r\n    \"   \"\r\n  );\r\n}\r\n\r\nfunction renderTreeNodeProp(\r\n  propKey,\r\n  data,\r\n  level,\r\n  levelPrefix,\r\n  prefix,\r\n  levelAppend\r\n) {\r\n  if (data[propKey] === null) {\r\n    return (\r\n      <DefaultTreeNodeProp\r\n        key={propKey}\r\n        prefix={levelPrefix + prefix}\r\n        propValue=\"null\"\r\n        valueClass=\"null\"\r\n        propKey={propKey}\r\n      />\r\n    );\r\n  } else if (typeof data[propKey] === \"undefined\") {\r\n    return (\r\n      <DefaultTreeNodeProp\r\n        key={propKey}\r\n        prefix={levelPrefix + prefix}\r\n        propValue=\"undefined\"\r\n        valueClass=\"null\"\r\n        propKey={propKey}\r\n      />\r\n    );\r\n  } else if (data[propKey] === data) {\r\n    return (\r\n      <DefaultTreeNodeProp\r\n        key={propKey}\r\n        prefix={levelPrefix + prefix}\r\n        propValue=\"(RECURSION)\"\r\n        valueClass=\"recursion\"\r\n        propKey={propKey}\r\n      />\r\n    );\r\n  } else if (typeof data[propKey] === \"object\") {\r\n    return (\r\n      <ObjectTreeNodeProp\r\n        key={propKey}\r\n        prefix={levelPrefix + prefix}\r\n        propKey={propKey}\r\n        data={data}\r\n        level={level}\r\n        levelPrefix={level === 0 ? \"\" : levelPrefix + levelAppend}\r\n      />\r\n    );\r\n  } else {\r\n    const valueClass = typeof data[propKey];\r\n    let propValue = data[propKey].toString().split(\"\\n\")[0];\r\n    propValue =\r\n      propValue.length > 25 ? propValue.substring(0, 25) + \"...\" : propValue;\r\n    return (\r\n      <DefaultTreeNodeProp\r\n        key={propKey}\r\n        prefix={levelPrefix + prefix}\r\n        propValue={propValue}\r\n        valueClass={valueClass}\r\n        propKey={propKey}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nfunction TreeNode({ data, level = 0, levelPrefix = \"\", collapsed = true }) {\r\n  let treeNodeProps = [];\r\n  let sortedPropKeys = [];\r\n  for (let key in data) {\r\n    sortedPropKeys.push(key);\r\n  }\r\n  sortedPropKeys.sort();\r\n  if (sortedPropKeys.length) {\r\n    for (let i = 0; i < sortedPropKeys.length - 1; i++) {\r\n      treeNodeProps.push(\r\n        renderNormalTreeNodeProp(sortedPropKeys[i], data, level, levelPrefix)\r\n      );\r\n    }\r\n    treeNodeProps.push(\r\n      renderLastChildTreeNodeProp(\r\n        sortedPropKeys[sortedPropKeys.length - 1],\r\n        data,\r\n        level,\r\n        levelPrefix\r\n      )\r\n    );\r\n  }\r\n  if (collapsed) {\r\n    return null;\r\n  } else {\r\n    return <div>{treeNodeProps}</div>;\r\n  }\r\n}\r\n\r\nexport default TreeNode;\r\n","import React from \"react\";\r\nimport TreeNode from \"./components/TreeNode\";\r\n\r\nfunction App() {\r\n  return <TreeNode data={{ window }} collapsed={false} />;\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}